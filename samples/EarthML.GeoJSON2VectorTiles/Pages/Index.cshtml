@page
<!doctype html>
<html lang="en">
<head>
    <link rel="stylesheet" href="https://openlayers.org/en/v4.3.1/css/ol.css" type="text/css">
    <style>
        body, html,.map {
            height: 100%;
            width: 100%;
        }
    </style>
    <script src="https://openlayers.org/en/v4.3.1/build/ol.js" type="text/javascript"></script>
    <title>OpenLayers example</title>
</head>
<body>
    <div id="map" class="map"></div>
    <script type="text/javascript">
        var resolutions = [];
        for (var i = 0; i <= 6; ++i) {
            resolutions.push(156543.03392804097 / Math.pow(2, i));
        }

      var map = new ol.Map({
        target: 'map',
        layers: [
          new ol.layer.Tile({
            source: new ol.source.OSM()
            }),
          new ol.layer.VectorTile({
              style: (function () {
                  var style = new ol.style.Style({
                      fill: new ol.style.Fill({
                          color: 'rgba(255, 0, 0, 0.0)'
                      }),
                      stroke: new ol.style.Stroke({
                          color: 'black',
                          width: 1
                      }),
                      text: new ol.style.Text({
                          text: 'Hello',
                          scale: 1.3,
                          fill: new ol.style.Fill({
                              color: '#000000'
                          }),
                          //stroke: new ol.style.Stroke({
                          //    color: '#FFFF99',
                          //    width: 1
                          //})
                      })
                  });
                  var styles = [style];
                  return function (feature, resolution) {
                      
                      style.getText().setText(feature.getGeometry().getType() === "Polygon" ? "" : feature.get("tileId"));
                   //   style.getStroke().setColor(feature.getGeometry().getType() === "Polygon" ? (parseFloat(feature.get("tileId").substr(0, 2)) % 2 === 0 ? (feature.get("tileId").charCodeAt(2) % 2 === 0 ? 'black' : 'red') : (feature.get("tileId").charCodeAt(2) % 2 === 0 ? 'red' : 'black')) : 'black');
                      return feature.get("tileId").substr(0, 2) === "32" ? styles : [];
                  };
              })(),
              source: new ol.source.VectorTile({
                  format: new ol.format.MVT(),
                  projection: new ol.proj.Projection({
                      code: 'TILE_PIXELS',
                      units: 'tile-pixels'
                  }),
                  maxZoom: 6,
                  url: 'http://localhost:5000/{z}/{x}/{y}.vector.pbf',
                  tileGrid: new ol.tilegrid.TileGrid({
                      extent: ol.proj.get('EPSG:3857').getExtent(),
                     // tileSize: 4096,                      
                      resolutions: resolutions
                  }),
                  tilePixelRatio: 16,
              })
          })
          //,
          //new ol.layer.Tile({
          //    source: new ol.source.TileDebug({
          //        projection: 'EPSG:3857',
          //        tileGrid: new ol.source.OSM().getTileGrid()
          //    })
          //})
        ],
        view: new ol.View({
          center: ol.proj.fromLonLat([37.41, 8.82]),
          zoom: 4
        })
      });
    </script>
</body>
</html>